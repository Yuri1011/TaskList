{"version":3,"sources":["TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoList","props","useState","title","setTitle","error","setError","addTask","trim","id","onClick","removeTodoList","value","onKeyPress","e","key","onChange","currentTarget","className","tasks","map","t","isDone","type","checked","newIsDoneValue","changeTaskStatus","removeTask","filter","changeFilter","App","todoListId_1","v1","todoListId_2","todoLists","setTodoLists","setTasks","tl","todoListId","task","todoListTasks","todolist","find","changeStatus","allTodoListTasks","tasksForTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e7f6f80b.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype PropsTypeTodoList = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    filter: string\r\n    changeTaskStatus: (id: string, isDone: boolean, todoListId: string) => void\r\n    removeTodoList: (id: string) => void\r\n}\r\n\r\nexport function TodoList(props: PropsTypeTodoList) {\r\n\r\n    let [title, setTitle] = useState('');\r\n    let [error, setError] = useState<string | null>(null);\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== '') {\r\n            props.addTask(title, props.id);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.key === 'Enter') {\r\n            addTask();\r\n        }\r\n    }\r\n    const onClickAllHandler = () => props.changeFilter('all', props.id)\r\n    const onClickCompletedHandler = () => props.changeFilter('active', props.id)\r\n    const onClickActiveHandler = () => props.changeFilter('completed', props.id)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n    return (\r\n        <div>\r\n            <h3>{props.title}\r\n                <button onClick={() => props.removeTodoList(props.id)}>X</button>\r\n            </h3>\r\n            <div>\r\n                <input value={title}\r\n                       onKeyPress={onKeyPressHandler} onChange={onChangeHandler}/>\r\n                <button onClick={addTask}>+</button>\r\n                {error && <div className='error-message'>{error}</div>}\r\n            </div>\r\n            <ul>\r\n                {\r\n                    props.tasks.map((t) => {\r\n                        const onClickRemoveTaskHandler = () => props.removeTask(t.id, props.id);\r\n                        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            let newIsDoneValue = e.currentTarget.checked;\r\n                            props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                        }\r\n                            return (\r\n                                <li key={t.id} className={t.isDone ? 'is-done' : ''}>\r\n                                    <input type=\"checkbox\" checked={t.isDone} onChange={onChangeHandler}/>\r\n                                    <span>{t.title}</span>\r\n                                    <button onClick={onClickRemoveTaskHandler}>X</button>\r\n                                </li>\r\n                            )\r\n                        }\r\n                    )\r\n                }\r\n            </ul>\r\n\r\n            <div>\r\n                <button className={props.filter === 'all' ? 'active-filter' : ''}\r\n                        onClick={onClickAllHandler}>All\r\n                </button>\r\n                <button className={props.filter === 'active' ? 'active-filter' : ''}\r\n                        onClick={onClickCompletedHandler}>Active\r\n                </button>\r\n                <button className={props.filter === 'completed' ? 'active-filter' : ''}\r\n                        onClick={onClickActiveHandler}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, TodoList} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\n\r\ntype TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type FilterValuesType = 'all' | 'completed' | 'active';\r\ntype TodoListType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType\r\n}\r\n\r\nfunction App() {\r\n    let todoListId_1 = v1();\r\n    let todoListId_2 = v1();\r\n\r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {\r\n            id: todoListId_1,\r\n            title: 'What to Learn',\r\n            filter: 'all'\r\n        },\r\n        {\r\n            id: todoListId_2,\r\n            title: 'What to buy',\r\n            filter: 'all'\r\n        }\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListId_1]:\r\n            [\r\n                {id: v1(), title: 'HTML & CSS', isDone: true},\r\n                {id: v1(), title: 'JS', isDone: true},\r\n                {id: v1(), title: 'ReactJS', isDone: false}\r\n            ],\r\n        [todoListId_2]:\r\n            [\r\n                {id: v1(), title: 'RestApi', isDone: false},\r\n                {id: v1(), title: 'GraphQl', isDone: false}\r\n            ]\r\n    })\r\n\r\n    function removeTodoList(id: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id != id));\r\n        delete tasks[id];\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTask(title: string, todoListId: string) {\r\n        let task = {id: v1(), title: title, isDone: false}\r\n        let todoListTasks = tasks[todoListId];\r\n        tasks[todoListId] = [task, ...todoListTasks];\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function removeTask(id: string, todoListId: string) {\r\n        let todoListTasks = tasks[todoListId];\r\n        tasks[todoListId] = todoListTasks.filter(t => t.id != id);\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListId: string) {\r\n        let todolist = todoLists.find(tl => tl.id === todoListId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodoLists([...todoLists]);\r\n        }\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todoListId: string) {\r\n        let todoListTasks = tasks[todoListId];\r\n        let task = todoListTasks.find(t => t.id === id);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {\r\n                todoLists.map(tl => {\r\n                        let allTodoListTasks = tasks[tl.id];\r\n                        let tasksForTodoList = allTodoListTasks;\r\n\r\n                        if (tl.filter === 'active') {\r\n                            tasksForTodoList = allTodoListTasks.filter(task => !task.isDone);\r\n                        }\r\n                        if (tl.filter === 'completed') {\r\n                            tasksForTodoList = allTodoListTasks.filter(task => task.isDone);\r\n                        }\r\n                        return <TodoList title={tl.title}\r\n                                         tasks={tasksForTodoList}\r\n                                         removeTask={removeTask}\r\n                                         changeFilter={changeFilter}\r\n                                         addTask={addTask}\r\n                                         filter={tl.filter}\r\n                                         changeTaskStatus={changeStatus}\r\n                                         removeTodoList={removeTodoList}\r\n                                         id={tl.id}\r\n                                         key={tl.id}\r\n\r\n                        />\r\n                    }\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
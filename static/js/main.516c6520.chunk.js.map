{"version":3,"sources":["components/AddItemForm/AddItemForm.tsx","components/EditTableSpan/EditTableSpan.tsx","components/TodoList/TodoList.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addTask","trim","addItem","TextField","onChange","e","currentTarget","value","onKeyPress","key","variant","label","helperText","IconButton","onClick","AddBox","color","EditTableSpan","editMode","setEditMode","onBlur","autoFocus","event","onDoubleClick","TodoList","newTitle","changeTodoListTitle","id","removeTodoList","Delete","tasks","map","t","className","isDone","Checkbox","checked","newIsDoneValue","changeTaskStatus","newValue","changeTaskTitle","removeTask","Button","filter","changeFilter","App","todoListId_1","v1","todoListId_2","todoLists","setTodoLists","setTasks","tl","todoListId","task","todoListTasks","todolist","find","changeStatus","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","todoList","spacing","allTodoListTasks","tasksForTodoList","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.516c6520.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState('');\r\n    let [error, setError] = useState<string | null>(null);\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.key === 'Enter') {\r\n            addTask();\r\n        }\r\n    }\r\n    const addTask = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField onChange={onChangeHandler}\r\n                       value={title}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       variant={'outlined'}\r\n                       error={!!error}\r\n                       label={'title'}\r\n                       helperText={error}\r\n            />\r\n            <IconButton onClick={addTask}>\r\n                <AddBox color={'primary'}/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditTableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditTableSpan(props: EditTableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState('');\r\n\r\n    let activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.title);\r\n    }\r\n    let activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title);\r\n    };\r\n    let onChangeTitleHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value);\r\n    }\r\n    return (\r\n        editMode ? <TextField value={title}\r\n                              onBlur={activateViewMode}\r\n                              autoFocus={true}\r\n                              onChange={onChangeTitleHandler}/>\r\n            : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType} from \"../../App/App\";\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {EditTableSpan} from \"../EditTableSpan/EditTableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype PropsTypeTodoList = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    filter: string\r\n    changeTaskStatus: (id: string, isDone: boolean, todoListId: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todoListId: string) => void\r\n    removeTodoList: (id: string) => void\r\n    changeTodoListTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport function TodoList(props: PropsTypeTodoList) {\r\n\r\n    const removeTodoList = () => {\r\n        props.removeTodoList(props.id)\r\n    };\r\n    const onClickAllHandler = () => props.changeFilter('all', props.id)\r\n    const onClickActiveHandler = () => props.changeFilter('completed', props.id)\r\n    const onClickCompletedHandler = () => props.changeFilter('active', props.id)\r\n    const addTask = (title: string) => props.addTask(title, props.id);\r\n    const changeTodoListTitle = (newTitle: string) => {\r\n        props.changeTodoListTitle(props.id, newTitle);\r\n    }\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditTableSpan title={props.title}\r\n                               onChange={changeTodoListTitle}/>\r\n                <IconButton onClick={removeTodoList}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {\r\n                    props.tasks.map((t) => {\r\n                            const onClickRemoveTaskHandler = () => props.removeTask(t.id, props.id);\r\n                            const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                                let newIsDoneValue = e.currentTarget.checked;\r\n                                props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                            }\r\n                            const onChangeTitleHandler = (newValue: string) => {\r\n                                props.changeTaskTitle(t.id, newValue, props.id);\r\n                            }\r\n                            return (\r\n                                <div key={t.id}\r\n                                     className={t.isDone ? 'is-done' : ''}>\r\n                                    <Checkbox color={'primary'}\r\n                                              checked={t.isDone}\r\n                                              onChange={onChangeHandler}/>\r\n                                    <EditTableSpan title={t.title}\r\n                                                   onChange={onChangeTitleHandler}/>\r\n                                    <IconButton onClick={onClickRemoveTaskHandler}>\r\n                                        <Delete/>\r\n                                    </IconButton>\r\n                                </div>\r\n                            )\r\n                        }\r\n                    )\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                        onClick={onClickAllHandler}\r\n                        color={'inherit'}>\r\n                    All\r\n                </Button>\r\n                <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                        onClick={onClickCompletedHandler}\r\n                        color={'primary'}>\r\n                    Active\r\n                </Button>\r\n                <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                        onClick={onClickActiveHandler}\r\n                        color={'secondary'}>\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, TodoList} from \"../components/TodoList/TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"../components/AddItemForm/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\ntype TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type FilterValuesType = 'all' | 'completed' | 'active';\r\ntype TodoListType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType\r\n}\r\n\r\nfunction App() {\r\n    let todoListId_1 = v1();\r\n    let todoListId_2 = v1();\r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {\r\n            id: todoListId_1,\r\n            title: 'What to Learn',\r\n            filter: 'all'\r\n        },\r\n        {\r\n            id: todoListId_2,\r\n            title: 'What to buy',\r\n            filter: 'all'\r\n        }\r\n    ])\r\n    let [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListId_1]:\r\n            [\r\n                {id: v1(), title: 'HTML & CSS', isDone: true},\r\n                {id: v1(), title: 'JS', isDone: true},\r\n                {id: v1(), title: 'ReactJS', isDone: false}\r\n            ],\r\n        [todoListId_2]:\r\n            [\r\n                {id: v1(), title: 'RestApi', isDone: false},\r\n                {id: v1(), title: 'GraphQl', isDone: false}\r\n            ]\r\n    })\r\n\r\n    function removeTodoList(id: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id != id));\r\n        delete tasks[id];\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTask(title: string, todoListId: string) {\r\n        let task = {id: v1(), title: title, isDone: false}\r\n        let todoListTasks = tasks[todoListId];\r\n        tasks[todoListId] = [task, ...todoListTasks];\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function removeTask(id: string, todoListId: string) {\r\n        let todoListTasks = tasks[todoListId];\r\n        tasks[todoListId] = todoListTasks.filter(t => t.id != id);\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListId: string) {\r\n        let todolist = todoLists.find(tl => tl.id === todoListId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodoLists([...todoLists]);\r\n        }\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todoListId: string) {\r\n        let todoListTasks = tasks[todoListId];\r\n        let task = todoListTasks.find(t => t.id === id);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeTaskTitle(id: string, newTitle: string, todoListId: string) {\r\n        let todoListTasks = tasks[todoListId];\r\n        let task = todoListTasks.find(t => t.id === id);\r\n        if (task) {\r\n            task.title = newTitle;\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        let todoList: TodoListType = {\r\n            id: v1(),\r\n            filter: 'all',\r\n            title: title\r\n        };\r\n        setTodoLists([todoList, ...todoLists]);\r\n        setTasks({\r\n            ...tasks,\r\n            [todoList.id]: []\r\n        })\r\n    }\r\n\r\n    function changeTodoListTitle(id: string, newTitle: string) {\r\n        let todolist = todoLists.find(tl => tl.id === id);\r\n        if (todolist) {\r\n            todolist.title = newTitle;\r\n            setTodoLists([...todoLists]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todoLists.map(tl => {\r\n                                let allTodoListTasks = tasks[tl.id];\r\n                                let tasksForTodoList = allTodoListTasks;\r\n\r\n                                if (tl.filter === 'active') {\r\n                                    tasksForTodoList = allTodoListTasks.filter(task => !task.isDone);\r\n                                }\r\n                                if (tl.filter === 'completed') {\r\n                                    tasksForTodoList = allTodoListTasks.filter(task => task.isDone);\r\n                                }\r\n                                return <Grid item>\r\n                                    <Paper style={{padding: '10px'}}>\r\n                                        <TodoList title={tl.title}\r\n                                                  tasks={tasksForTodoList}\r\n                                                  removeTask={removeTask}\r\n                                                  changeFilter={changeFilter}\r\n                                                  addTask={addTask}\r\n                                                  filter={tl.filter}\r\n                                                  changeTaskStatus={changeStatus}\r\n                                                  removeTodoList={removeTodoList}\r\n                                                  id={tl.id}\r\n                                                  key={tl.id}\r\n                                                  changeTaskTitle={changeTaskTitle}\r\n                                                  changeTodoListTitle={changeTodoListTitle}/>\r\n                                    </Paper>\r\n                                </Grid>\r\n                            }\r\n                        )\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}